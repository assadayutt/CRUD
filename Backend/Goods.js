const multer = require("multer");
const path = require("path");
const fs = require("fs");

module.exports = (app, db, jwt, SECRET_KEY) => {
  // üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
  const uploadDir = path.join(__dirname, "..", "Image", "Goods");
  if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
  }

  // üì¶ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ multer
  const storage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, uploadDir); // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô /Image/Goods/
    },
    filename: (req, file, cb) => {
      const uniqueName = Date.now() + "-" + file.originalname;
      cb(null, uniqueName);
    },
  });

  const upload = multer({ storage });

  // üì§ API ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
app.post("/addGoods", upload.single("goods_pic"), (req, res) => {
  const { goods_name, goods_price, goods_stock } = req.body;

  if (!req.file) {
    return res.status(400).send("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û");
  }

  const goods_pic = "/Image/Goods/" + req.file.filename;

  function generateGoodsId() {
    return Math.floor(1000000000 + Math.random() * 9000000000).toString();
  }

  function checkAndInsert() {
    const goods_id = generateGoodsId();

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ goods_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const checkSql = "SELECT COUNT(*) AS count FROM goods WHERE goods_id = ?";
    db.query(checkSql, [goods_id], (err, results) => {
      if (err) {
        console.error("‚ùå Check ID error:", err);
        return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      }

      if (results[0].count > 0) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà)
        return checkAndInsert();
      } else {
        // ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ insert ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        const insertSql = `
          INSERT INTO goods (goods_id, goods_name, goods_price, goods_stock, goods_pic)
          VALUES (?, ?, ?, ?, ?)
        `;

        db.query(
          insertSql,
          [goods_id, goods_name, goods_price, goods_stock, goods_pic],
          (err) => {
            if (err) {
              console.error("‚ùå Insert error:", err);
              return res.status(500).send("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
            res.send("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
          }
        );
      }
    });
  }

  checkAndInsert();
});



  // üì¶ API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  app.get("/goods", (req, res) => {
    const sql = `
      SELECT goods_id, goods_name, goods_price, goods_stock, goods_pic FROM goods
    `;
    db.query(sql, (err, results) => {
      if (err) {
        console.error("‚ùå Query error:", err);
        return res.status(500).send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
      }
      res.json(results);
    });
  });


// middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á user_id
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer <token>

  if (!token) return res.status(401).json({ error: '‡πÑ‡∏°‡πà‡∏°‡∏µ token' });

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) return res.status(403).json({ error: 'token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    req.user = user; 
    next();
  });
}

app.post('/addTocart', authenticateToken, (req, res) => {
  const userId = req.user.id; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ token payload ‡∏°‡∏µ id
  const { goods_id, quantity } = req.body;

  if (!goods_id || !quantity || quantity < 1) {
    return res.status(400).json({ error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  db.query('SELECT goods_stock FROM goods WHERE goods_id = ?', [goods_id], (err, goodsRows) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    if (goodsRows.length === 0) {
      return res.status(404).json({ error: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö' });
    }

    if (goodsRows[0].goods_stock < quantity) {
      return res.status(400).json({ error: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠' });
    }

    db.query(
      'SELECT quantity FROM cart WHERE user_id = ? AND goods_id = ?',
      [userId, goods_id],
      (err, cartRows) => {
        if (err) {
          console.error(err);
          return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }

        if (cartRows.length > 0) {
          // update quantity
          const newQuantity = cartRows[0].quantity + quantity;
          db.query(
            'UPDATE cart SET quantity = ? WHERE user_id = ? AND goods_id = ?',
            [newQuantity, userId, goods_id],
            (err) => {
              if (err) {
                console.error(err);
                return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤' });
              }
              return res.json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)' });
            }
          );
        } else {
          // insert ‡πÉ‡∏´‡∏°‡πà
          db.query(
            'INSERT INTO cart (user_id, goods_id, quantity) VALUES (?, ?, ?)',
            [userId, goods_id, quantity],
            (err) => {
              if (err) {
                console.error(err);
                return res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤' });
              }
              return res.json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
            }
          );
        }
      }
    );
  });
});


};
